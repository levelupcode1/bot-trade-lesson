# 변동성 돌파 기반 자동매매 시스템 개발 규칙

## 🎯 프로젝트 개요

이 프로젝트는 **VBT-Bot (Volatility Breakout Trading Bot)**으로, 변동성 돌파 전략을 활용한 24/7 자동 암호화폐 거래 시스템입니다.

### 핵심 목표
- 거래 수익률 극대화
- 리스크 최소화  
- 수동 개입 최소화
- 실시간 모니터링 및 알림

## 🏗️ 아키텍처 원칙

### 기술 스택
- **Backend**: Python 3.8+
- **Database**: SQLite 3.x
- **API**: 업비트 REST API + WebSocket
- **Messaging**: 텔레그램 Bot API
- **Monitoring**: Prometheus + Grafana (선택사항)

### 설계 제약사항
- Python 3.8+ 하위 호환성 제한
- SQLite 단일 파일 데이터베이스 사용
- 업비트 현물 거래소만 지원
- Linux/Windows/macOS 크로스 플랫폼 지원

## 📁 프로젝트 구조 가이드

### 권장 디렉토리 구조
```
bot-trade/
├── src/                    # 소스 코드
│   ├── core/              # 핵심 모듈
│   ├── exchange/          # 거래소 연동
│   ├── strategy/          # 거래 전략
│   ├── risk/              # 리스크 관리
│   ├── notification/      # 알림 시스템
│   ├── database/          # 데이터베이스
│   └── utils/             # 유틸리티
├── config/                 # 설정 파일
├── tests/                  # 테스트 코드
├── docs/                   # 문서
├── logs/                   # 로그 파일
└── data/                   # 데이터 저장소
```

## 🔧 코딩 표준

### Python 코딩 규칙
- **Python 3.8+** 문법 사용
- **PEP 8** 스타일 가이드 준수
- **Type hints** 사용 권장
- **Docstring** 필수 작성
- **한글 주석** 사용 (사용자 요구사항)

### 코드 품질 도구
- **flake8**: 코드 스타일 검사
- **black**: 코드 포맷팅
- **mypy**: 타입 검사
- **pytest**: 테스트 실행

### 명명 규칙
- **클래스**: PascalCase (예: `VolatilityBreakoutStrategy`)
- **함수/변수**: snake_case (예: `calculate_volatility`)
- **상수**: UPPER_SNAKE_CASE (예: `MAX_POSITION_SIZE`)
- **파일명**: snake_case (예: `price_monitor.py`)

## 📊 핵심 기능 구현 가이드

### 1. 가격 모니터링 (F001)
```python
# 예시 구조
class PriceMonitor:
    """실시간 암호화폐 가격 데이터 수집 및 분석"""
    
    def __init__(self, exchange_api):
        self.exchange_api = exchange_api
        self.websocket_client = None
    
    async def start_monitoring(self):
        """WebSocket을 통한 실시간 시세 수신 시작"""
        pass
    
    def calculate_technical_indicators(self, price_data):
        """기술적 지표 계산 (RSI, MACD, 볼린저 밴드 등)"""
        pass
```

### 2. 주문 실행 (F002)
```python
class OrderExecutor:
    """거래 전략에 따른 자동 주문 실행"""
    
    def execute_order(self, order_params):
        """주문 실행 및 결과 추적"""
        pass
    
    def handle_partial_fill(self, order_id):
        """부분 체결 처리 및 재주문 로직"""
        pass
```

### 3. 리스크 관리 (F003) - Critical 우선순위
```python
class RiskManager:
    """포지션 리스크 실시간 모니터링 및 제어"""
    
    def check_daily_loss_limit(self, current_loss):
        """일일 손실 한도 확인"""
        pass
    
    def calculate_position_size(self, account_balance):
        """포지션 크기 자동 조절 (계좌 잔고의 10% 이하)"""
        pass
    
    def execute_stop_loss(self, position):
        """스탑로스/익절 자동 실행"""
        pass
```

### 4. 알림 시스템 (F004)
```python
class TelegramNotifier:
    """텔레그램을 통한 실시간 거래 및 시스템 알림"""
    
    def send_trade_notification(self, trade_event):
        """거래 실행 알림 (매수/매도)"""
        pass
    
    def send_performance_report(self, report_type):
        """일일/주간/월간 성과 리포트"""
        pass
```

### 5. 데이터 관리 (F005)
```python
class DatabaseManager:
    """SQLite 데이터베이스를 통한 거래 데이터 저장"""
    
    def save_trade_data(self, trade_data):
        """거래 이력 저장"""
        pass
    
    def backup_database(self):
        """데이터 백업 및 복구"""
        pass
```

## 🚨 성능 및 안정성 요구사항

### 성능 지표
- **주문 실행**: 100ms 이하
- **시세 데이터 수신**: 50ms 이하  
- **알림 전송**: 200ms 이하
- **처리량**: 초당 1000건 이상

### 안정성 요구사항
- **가동률**: 99.5% 이상
- **데이터 무결성**: 99.99% 이상
- **장애 복구 시간**: 5분 이하

### 리스크 관리
- **일일 손실 한도**: 계좌 잔고의 2% 이하
- **포지션 크기**: 계좌 잔고의 10% 이하
- **최대 동시 포지션**: 5개 이하

## 🧪 테스트 가이드라인

### 테스트 구조
- **단위 테스트**: 개별 모듈 기능 검증
- **통합 테스트**: 모듈 간 연동 검증
- **시스템 테스트**: 전체 시스템 동작 검증
- **성능 테스트**: 부하 테스트 (1000 TPS)

### 테스트 도구
- **pytest**: 테스트 프레임워크
- **unittest**: 기본 테스트 라이브러리
- **Mock**: 외부 의존성 모킹

## 📝 로깅 및 모니터링

### 로깅 규칙
- **구조화된 JSON 로그** 사용
- **로그 레벨별 관리** (DEBUG, INFO, WARNING, ERROR, CRITICAL)
- **한글 메시지** 포함하여 가독성 향상

### 모니터링 지표
- 시스템 가동률
- 주문 실행 성공률
- 응답 시간
- 리스크 지표

## 🔐 보안 가이드라인

### API 키 보안
- **암호화 저장** 및 접근 제어
- **환경 변수** 사용 권장
- **API 키 권한 최소화**

### 데이터 보안
- **민감 정보 암호화 저장**
- **HTTPS/TLS 1.3** 사용
- **역할 기반 접근 제어 (RBAC)**

## 📋 개발 단계별 체크리스트

### Phase 1: 기반 시스템 구축 (4주)
- [ ] Python 프로젝트 구조 설정
- [ ] 기본 클래스 및 인터페이스 설계
- [ ] 설정 관리 시스템 구현
- [ ] SQLite 데이터베이스 설계 및 구현
- [ ] 로깅 및 모니터링 시스템

### Phase 2: 거래소 연동 (3주)
- [ ] 업비트 REST API 연동
- [ ] WebSocket 실시간 데이터 수신
- [ ] 주문 실행 시스템 구현
- [ ] API 연동 테스트 및 최적화

### Phase 3: 거래 전략 구현 (4주)
- [ ] 변동성 돌파 전략 로직
- [ ] 기술적 지표 계산
- [ ] 신호 생성 시스템
- [ ] 리스크 관리 시스템

### Phase 4: 모니터링 및 알림 (2주)
- [ ] 텔레그램 봇 구현
- [ ] 알림 메시지 템플릿
- [ ] 실시간 알림 시스템

### Phase 5: 통합 및 테스트 (3주)
- [ ] 모듈 간 연동 테스트
- [ ] 전체 워크플로우 테스트
- [ ] 성능 및 안정성 테스트

## ⚠️ 주의사항

### 거래 관련
- **실제 자금** 사용 시 충분한 테스트 필수
- **리스크 관리** 우선 적용
- **업비트 API 제한** 고려

### 개발 관련
- **에러 처리** 철저히 구현
- **로깅** 상세하게 기록
- **백업 시스템** 필수 구현

## 📚 참고 자료

- [PRD_자동매매시스템.md](mdc:PRD_자동매매시스템.md) - 상세 요구사항 문서
- 업비트 API 문서
- Python 공식 문서
- SQLite 공식 문서

---

**규칙 버전**: 1.0  
**최종 업데이트**: 2024년 12월 19일  
**적용 범위**: 전체 프로젝트
description:
globs:
alwaysApply: false
---
