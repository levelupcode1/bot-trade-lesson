---
alwaysApply: true
description: 자동매매 시스템 프로젝트 개요 및 아키텍처 가이드
---

# 자동매매 시스템 프로젝트 개요 및 아키텍처

## 🎯 프로젝트 개요

### 제품명
**CryptoAutoTrader** - 암호화폐 자동매매 시스템

### 핵심 목표
- 업비트 현물 거래소와 연동하여 24/7 자동 거래 실행
- 다양한 트레이딩 전략을 지원하는 확장 가능한 시스템
- 실시간 모니터링 및 텔레그램 알림을 통한 투명한 거래 관리
- 안정적이고 안전한 자동매매 환경 제공

### 핵심 지표 (KPI)
- **수익률**: 월간 목표 수익률 5-15%
- **최대 낙폭(MDD)**: 10% 이하 유지
- **승률**: 60% 이상
- **샤프 비율**: 1.5 이상
- **시스템 가동률**: 99.5% 이상
- **응답 시간**: 주문 실행 3초 이내

## 🏗️ 기술 아키텍처

### 기술 스택
- **언어**: Python 3.8+
- **데이터베이스**: SQLite
- **API 연동**: 업비트 API v1
- **알림**: 텔레그램 Bot API
- **웹 프레임워크**: Flask/FastAPI
- **백테스팅**: pandas, numpy
- **시각화**: matplotlib, plotly

### 지원 거래소
- **주 거래소**: 업비트 (현물)
- **확장 가능**: 바이낸스, 코인원 등 (향후)

## 📁 권장 프로젝트 구조

```
crypto-auto-trader/
├── src/                        # 소스 코드
│   ├── core/                   # 핵심 모듈
│   │   ├── __init__.py
│   │   ├── base_strategy.py    # 기본 전략 클래스
│   │   ├── trading_system.py   # 메인 트레이딩 시스템
│   │   └── config_manager.py   # 설정 관리
│   ├── exchange/               # 거래소 연동
│   │   ├── __init__.py
│   │   ├── upbit_api.py        # 업비트 API 클라이언트
│   │   ├── websocket_client.py # WebSocket 클라이언트
│   │   └── order_manager.py    # 주문 관리
│   ├── strategy/               # 거래 전략
│   │   ├── __init__.py
│   │   ├── volatility_breakout.py # 변동성 돌파 전략
│   │   ├── ma_crossover.py     # 이동평균 교차 전략
│   │   └── rsi_strategy.py     # RSI 전략
│   ├── risk/                   # 리스크 관리
│   │   ├── __init__.py
│   │   ├── risk_manager.py     # 리스크 관리자
│   │   ├── position_manager.py # 포지션 관리
│   │   └── stop_loss.py        # 손절/익절 관리
│   ├── notification/           # 알림 시스템
│   │   ├── __init__.py
│   │   ├── telegram_bot.py     # 텔레그램 봇
│   │   └── alert_manager.py    # 알림 관리자
│   ├── database/               # 데이터베이스
│   │   ├── __init__.py
│   │   ├── models.py           # 데이터 모델
│   │   ├── database.py         # 데이터베이스 연결
│   │   └── migrations.py       # 마이그레이션
│   ├── monitoring/             # 모니터링
│   │   ├── __init__.py
│   │   ├── price_monitor.py    # 가격 모니터링
│   │   ├── performance.py      # 성과 분석
│   │   └── health_check.py     # 헬스 체크
│   ├── utils/                  # 유틸리티
│   │   ├── __init__.py
│   │   ├── logger.py           # 로깅 유틸리티
│   │   ├── validators.py       # 검증 유틸리티
│   │   └── helpers.py          # 헬퍼 함수
│   └── web/                    # 웹 인터페이스
│       ├── __init__.py
│       ├── app.py              # Flask 앱
│       ├── routes.py           # 라우트
│       └── templates/          # HTML 템플릿
├── config/                     # 설정 파일
│   ├── config.yaml             # 메인 설정
│   ├── strategies.yaml         # 전략 설정
│   └── risk_rules.yaml         # 리스크 규칙
├── tests/                      # 테스트 코드
│   ├── unit/                   # 단위 테스트
│   ├── integration/            # 통합 테스트
│   └── e2e/                    # E2E 테스트
├── docs/                       # 문서
│   ├── api/                    # API 문서
│   ├── user_guide/             # 사용자 가이드
│   └── developer/              # 개발자 문서
├── logs/                       # 로그 파일
├── data/                       # 데이터 저장소
│   ├── database/               # SQLite 데이터베이스
│   ├── backups/                # 백업 파일
│   └── exports/                # 내보내기 파일
├── requirements.txt            # Python 의존성
├── setup.py                    # 설치 스크립트
├── README.md                   # 프로젝트 설명
└── PRD.md                      # 제품 요구사항 문서
```

## 🔧 설계 원칙

### 1. 모듈화
- 각 기능별로 독립적인 모듈로 분리
- 명확한 인터페이스 정의
- 의존성 최소화

### 2. 확장성
- 새로운 전략 추가 용이
- 다른 거래소 연동 가능
- 플러그인 아키텍처 지원

### 3. 안정성
- 오류 처리 및 복구 메커니즘
- 데이터 무결성 보장
- 장애 대응 시스템

### 4. 보안
- API 키 암호화 저장
- 접근 권한 관리
- 감사 로그 기록

## 📊 핵심 컴포넌트

### 1. Trading System (핵심)
- 전체 거래 시스템의 중앙 제어
- 전략 실행 및 관리
- 상태 모니터링

### 2. Exchange Integration
- 업비트 API 연동
- 실시간 데이터 수신
- 주문 실행 및 관리

### 3. Strategy Framework
- 표준화된 전략 인터페이스
- 전략 매개변수 관리
- 성과 분석

### 4. Risk Management
- 포지션 크기 관리
- 손절/익절 실행
- 리스크 모니터링

### 5. Notification System
- 텔레그램 알림
- 이메일 알림 (선택사항)
- 알림 설정 관리

## 🚨 성능 요구사항

### 응답 시간
- **가격 업데이트**: 1초 이내
- **주문 실행**: 3초 이내
- **알림 전송**: 5초 이내
- **웹 인터페이스**: 2초 이내 로딩

### 처리량
- **동시 모니터링**: 최대 50개 코인
- **동시 전략**: 최대 10개 전략
- **데이터 저장**: 초당 1000건 처리

### 리소스 사용량
- **메모리 사용량**: 512MB 이하
- **CPU 사용량**: 평균 20% 이하
- **디스크 사용량**: 1GB 이하 (월간)

## 🔐 보안 요구사항

### API 보안
- API 키 암호화 저장
- 접근 제어 및 IP 화이트리스트
- 정기적인 키 로테이션

### 데이터 보안
- 민감한 데이터 암호화 저장
- 접근 로그 기록
- 백업 파일 암호화

### 시스템 보안
- 입력 검증 및 SQL 인젝션 방지
- XSS 방지
- 역할 기반 접근 제어

## 📋 개발 단계별 체크리스트

### Phase 1: 기본 시스템 (4주)
- [ ] 프로젝트 구조 설정
- [ ] 기본 클래스 및 인터페이스 설계
- [ ] 설정 관리 시스템 구현
- [ ] SQLite 데이터베이스 설계
- [ ] 로깅 시스템 구현

### Phase 2: 거래소 연동 (3주)
- [ ] 업비트 API 연동
- [ ] WebSocket 실시간 데이터 수신
- [ ] 주문 실행 시스템 구현
- [ ] API 연동 테스트

### Phase 3: 전략 시스템 (3주)
- [ ] 변동성 돌파 전략 구현
- [ ] 이동평균 교차 전략 구현
- [ ] 백테스트 시스템 구축
- [ ] 전략 성과 분석

### Phase 4: 리스크 관리 (2주)
- [ ] 손절/익절 기능
- [ ] 포지션 크기 관리
- [ ] 일일 손실 한도 설정
- [ ] 긴급 정지 기능

### Phase 5: 웹 인터페이스 (3주)
- [ ] 웹 기반 설정 인터페이스
- [ ] 실시간 모니터링 대시보드
- [ ] 거래 내역 조회
- [ ] 성과 분석 리포트

### Phase 6: 최적화 및 안정화 (2주)
- [ ] 성능 최적화
- [ ] 오류 처리 개선
- [ ] 보안 강화
- [ ] 사용자 매뉴얼 작성

## ⚠️ 주의사항

### 거래 관련
- **실제 자금** 사용 시 충분한 테스트 필수
- **리스크 관리** 우선 적용
- **업비트 API 제한** 고려 (초당 10회 요청)

### 개발 관련
- **에러 처리** 철저히 구현
- **로깅** 상세하게 기록
- **백업 시스템** 필수 구현
- **한글 주석** 사용 (사용자 요구사항)

## 📚 참고 자료

- [PRD.md](mdc:lesson-08/PRD.md) - 상세 제품 요구사항 문서
- [업비트 API 문서](https://docs.upbit.com/)
- [텔레그램 Bot API](https://core.telegram.org/bots/api)
- [Python 3.8+ 문서](https://docs.python.org/3/)
- [SQLite 문서](https://www.sqlite.org/docs.html)